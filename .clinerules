# Cline Rules for Snapmenu Templates Project

## Project Structure
- The project contains multiple templates in the `src/templates` directory.
- Each template follows a similar structure with React components, contexts, and data files.
- The root package.json now contains merged dependencies from all templates.

## Package Management
- All dependencies are now managed in the root package.json.
- When adding new dependencies, add them to the root package.json.
- The root package.json contains scripts from all templates.
- Use `npm install --legacy-peer-deps` when installing dependencies to bypass peer dependency checks due to version conflicts between packages.

## Template Structure
- Templates use React with either JavaScript or TypeScript.
- Templates use Tailwind CSS for styling.
- Templates use Vite as the build tool.
- Some templates use React Context API for state management, while others might use Redux.

## Naming Conventions
- Template directories follow the pattern: `[name]_template_snapmenu`.
- Component files use PascalCase (e.g., `Navigation.tsx`, `Footer.jsx`).
- Context files are named with the suffix `Context` (e.g., `CartContext.tsx`).

## File Organization
- Components are organized in a `components` directory.
- Pages are organized in a `pages` directory.
- Context providers are organized in a `context` directory.
- Data files are organized in a `data` directory.

## Development Workflow
- Use `npm run dev` to start the development server.
- Use `npm run build` to build the project for production.
- Use `npm run lint` to lint the project.
- Use `npm run preview` to preview the production build.
